1) Tried to use a cycle to iterate through the three bits marker...
	5 bits -> how many three bits has?
	
	
	4 bits -> threeBits (7,15)   2*8 
	
	5 bits -> threeBits (7,15,23,31) // 4*8
	
	6 bits -> threeBits (7,15,23,31,39,47,55,63) //8 * 8
	
	On printthreeBits used a vector to add the 3bits marker, tried out 8 bits. used a first cycle to populate the vector
		
		Vector<E> Vpositions = new Vector();
        	
        	as an example = {7,15,23,31} = {7 ,7 +8 ,7+8 +8...} always add 8 to elema
        	int num =7;
        	
        	// populate array
        	for (int i=0; i < 32; i++) {
        		Vpositions.add(num);
        		num+=8;
        	}  
        	then convert vector to array pos ..that means pos[i] => 1,2,3,4,5,6,7 , pos[i+1] = 8,9,10,11,12,13,14,15
        	
        	for (int i = 0 ; i < 7; i++) {
        		for (int i2 = 0 ; i2 < 32) {
        			pos[i]++;
        		}
        	}
        	Ou seja tendo os three bits markers, adiciono duma vez todos os elementos
        	 	markers  => (0,7,15,23,31)
        			 		+1 +1 +1 +1 +1
        			 		+1 +1 +1 +1 +1
        			 		+1 +1 +1 +1 +1
        			 		etc...
       Assim por exemplo com valores grandes, faco o o preenchimento da array do markers , em varias etapas 
        	
        Codifiquei o metodo getThreeBitsMarkerM , de modo que para cada etapa (por exemplo 65535) , faz-se a pesquisa de 1 a 65535 e depois 65535*2 ,e por ai
        
        
        	 every byte ,if we consider all the combinations, the bits that commpose it have the same number of zeros and ones to each other  
			so it only differs in sequece
		
		
		(00,01,10,11) => 2 ^2 = 4  => 00011011 => 27
		(01,00,11,10) => 2^2 = 4  => 01001110 => 78
		
		
		To optimize the brute force, one can not assing the zeros, since java sets zeros to non initializate variable.
		Also, some combinations are repeated on all numbers, (three bits), so dont need to cycle all		
		
		3bits , All combinations = 2^3 = 8 bits
	4bits , All combinations = 2^4 = 16bits
	5bits , All combinations = 2^5 = 4 bytes
	6bits , All combinations = 2^6 = 8 bytes
	7bits , All combinations = 2^7 = 16bytes

	if each bit represnt one number, then 2^8 bits represent 16 bytes
	
	
	1,1,1
	1,2,1
	2,1,1
	1,1,2
	2,2,2
	 
	 o que mudana posicao de 2)  ? pos2, pos1, pos3
	 
	 conjunto = 3 mudanças
	 
	 2A3 = 2*2*2 = 8 mudanças
	 
	 
