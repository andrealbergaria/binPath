

		the algorithm to permutations is, get three elements, and add each element to the prefix of the set
Te
						3 elements							           
					{1,2,3} {1,3,2} {2,1,3} {2,3,1} {3,1,2} {3,2,1} 6 elemes
					 
					 
					 
					4 elements
					{1,2,3,4} {1,2,4,3} {1,3,2,4} {1,3,4,2} {1,4,2,3} {1,4,3,2} {2,1,3,4} {2,1,4,3} 		24 elems
					 {2,3,1,4} {2,3,4,1} {2,4,1,3} {2,4,3,1}
					  {3,1,2,4} {3,1,4,2} {3,2,1,4} {3,2,4,1}
					   {3,4,1,2} {3,4,2,1} {4,1,2,3} {4,1,3,2} {4,2,1,3} {4,2,3,1} {4,3,1,2} {4,3,2,1}

					
                  a) 00000000 = [1,2,3]
                  
                  b) 00000001 = {1,2,3]  (var=1 1 change to set,regarding base, a)+1)
                  		{2,1,3},[1,3,2}, {3,2,1} c) + b) 3 elements
                  
                  c) 00000010 = [1,2,3]  (var=2 correspond to 2 changes to set regarding base, b)+1)
                  		
                  		
                  		primeira mudança = b)
                  		
                  		segunda mudança c)
                  		{1,2,3} {3,1,2} {2,3,1} 
                  
                  d)
                  	00000011 = [1,2,3] => (number = 3 , correspond to 3 changes regarding base)
                  		first change = b)
                  		second change =c)
                  		third change = already taken
                  
                  [1,2,3,4] -> 00000000
                  
                  First change
                  [1,2,3,4] -> 00000001 => {2,1,3,4} , {1,3,2,4},{1,2,4,3} 
                  
                  Second change
                  [1,2,3,4] -> {1,2,3,4} {2,1,4,3} {2,3,1,4) {3,1,2,4}{1,3,4,2}{1,4,2,3}{
                  
                  Correpondem aos arranjos simples = 6 combinations
                  To calculate permutations, set the numbers of elems toa binary number, 
                  	and increase another binary until it reaches the number of elements. Then apply changes
                  	n = all the changes used. In this case 3 changes
                  
                   
                  
                  what are the changes?
                  
                  var1+var2 , 
                  var1 = [1,3,2]  pos(3) -> pos(2) and inverse
                  		 [2,1,3] pos(1)  -> pos(2) and inverse
                  use var1 and change one position, or change 2positions from base
                  
                  using var1	     
                   var2 = [3,1,2]
                   		  
                  using change on two positions (pos(1) -> pos(2) ou pos(2) -> pos(3)
                  var 2 = [3,2,1]
                          
                  
                  
                  if it was binary code, then we would make a shift, in thise case we change pos
                      
                1)    100
                2)    010
                3)    001 pos(0) =pos(1),pos(2)=pos(1)  (2shifts, 0 -> 1 , 1->2, um shift uma posicao++)
                      
                     
                      3bits=8 orders
                      
                      e se eu fizer o shift, com posicao fixa no bit anterior
                      
                      01 01   ( ==> correspond to 100 , on the last seq (1)) 
                      01 10   ( ==! correspond to 010 , on the last seq(2) shift efectuado (01 01
                      10 10                                                                  01 10                                                                      
                      10 01   ( ==> correspond to 001, om the last seq(3) , shift efectuado (10 01
                                                                                            10 (01)
                                                                                                            
                    
                    num da posicao = numero binario (nao resulta)
                      000 = position(0)
                      001 = position(1)
                      010 = position(2)
                      100 = position(4)
                      
                      
                      
                     // equal one bit digit to a position, and other digit to a position  (1=1 0=2)
                     // 1=01 0=10
                     // so the bit 1 is equal to 1 position
                     // so the bit 0 is equal to 2 position
                     
                    so if the elements are two, then we case use the algorithm
                    
                    if the elements are three?
                        if the elements are three
                        => 000 (3bits) , 1st bit = 0 ... 2nd bit = 0 ...3rd bit = 0
                                                   1               1            1
                                        
                                        1st bit 
                                        1
                                        0
                                        
                                        if elements are 2 (like [a,b]), then 1st bit must be multiplied by 2
                                        1st bit must be 2nd bit uses 1st bit,
                                        
                                        2nd bit is 1bit , 1 bit
                                        
                                        0 0 A = (2nd bit = xor first bit ^ 0) 
                                        0 1 B = (2nd bit = xor first bit ^ 1 )
                                        1 0 C = (2nd bit = xor first bit ^ 1)
                                        1 1 D=  (2nd bit = xor first bit ^0 )
                                        
                                        B=C, A=D
                                        
                                        3 bits
                                        

                    bit 0 = pos(1)
                    bit 1 = pos(2)
                    bit 2 = pos(3)
                    
                    
                    
                    
                        
                    100 (1,2,2) 
                    010 (2,1,2)
                    001 (2,2,1)
                    
                    // bit 1 = 2, bit 0=1
                    100 (2,1,1)
                    010 (1,2,1)
                    001 (1,1,2)
                      
                   [2,3,4] 
                   1000  (1pos,2pos,2pos)
                   0100  (2pos,1pos,2pos)
                   0010  (2pos,2pos,1pos)
                    
                   
                   1000 (1000,0010,0010)
                   0100 (0010,1000,0010)
                   
                   
                   
                   so if i follow the algorithm (0000 00001 0010 0100 1000, 1111 1110 1101 1011,0111)
                   it woudl work
                   
                 
                 8 shifts, 8 positions, 
                 8 shifts , 8 positions (comecando no 11111111)
                 1 shifts = troca o ordem (posicaoo) entre 000000001 = 1  
                                                           000000010 = 2

                2nd shift = 00000010    =2 
                            00000100    =4
                            
                            // um shift aumenta a posicao por 1
                            shift = posicao+1;
                // trying three bytes
                [1,1,1]  
                // What changes in between [], is the position
                [3,1,1] -> 00000001 , pos(0),pos(1),pos(2)
                [1,3,1] -> 00000010
                [1,1,3] -> 00000100
                
                [2,1,1] -> 00001000 , pos(0),pos(1),pos(2)
                [1,2,1] -> 00010000
                [1,1,2] -> 00100000
                
                [2,2,2] -> 01000000
              
                [1,2,2] -> pos(0),pos(1),pos(2)
                [2,1,2]
                [2,2,1]
                
                [3,3,3]
                
                [1,3,3]
                [3,1,3]
                [3,3,1]
                
                [2,3,3]
                [3,2,3] -> pos(0),pos(1),pos(2)
                [3,3,2]
                
                
                
                
                
                // 2nd byte
                [1,1]
                [1,2]
                [1,3]
                [2,1]
                [3,1]
                [2,2]
                [2,1]
                [3,1]
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 [1,1,1]        00000000 
                 [3,1,1]        00000001 pos(0)
                 [1,3,1]        00000010 pos(1)
                 [1,1,3]        00000100 pos(2);
                 
                 [2,1,1]        00001000 pos(3);
                 [1,2,1]        00010000 pos(4);
                 [1,1,2]        00100000 pos(5);
                                01000000 pos(6);
                                10000000 pos(7)
                                         
                                         
                                         
                                         
                                         cada bit shift , transforma 
                                        (00000000 -> 00000001) pos_do_bit1(0)
                                           0     -> 1
                                          00000000 -> 00000010 pos_do_bit1(1)
                                            0     -> 2
                                            
                                            1 2 4 8
                 [1,2,2]
                 [1,2,3]
                 [1,3,3]
                 
                 [1,3,2]
             
                  
                 
                 // 3rd bytes
                 
                 
                 // 3rd bytes
                 char threeBytes_firstHalf[4];
                 char threeBytes_secondHalf[4];
                 
                 for (iterator=0 ; iterator < 3; iterator++) {
                     threeBytes_firstHalf[iterator] = firstHalf(iterator);
                     threeBytes_secondHalf[iterator] = secondHalf(iterator);
                 }
                 
                 
                
               // thing is, use the algorithm on a binary string like 0b1010101111100 (always bit shift 1)
                
}



// test 
/sera que é shift duas ou mais vezes (mais zeros?, por exmepl 11100 , 11000)
5 bits

00001    1    
00010   2
00100   4   
01000   8
10000   16

preciso de 
3,5,6,7,9,10,11,12,13,14,15

00011 3   (flip the bit , ignore zeros suffix)

add 0

000   0
001   1    
010   2
100 = 4

111   7  rev 0
101 = 5 rev 2
011 = 3 rev 1
110 = 6



    
    
4 bits)
---vao ser invertidos (de 0000,0001,0010,00 para 0111,0110, e parra 111,1110..)
1) 0000   0 
 0001   1 
 0010   2 
 0100   4 

2)  0 111  7 
    0 110  6 (changed one bit related to 111)
    0 101  5 (changed one bit related to 111)
    0 011  3
 
 -----------------
 para isto
 
3) inverteu 1) para 3)
 1111   15  (inverteu 1) para 3)
 1110   14  (changed on bit related to 1111) 
 1101   13  (changed on bit related to 1111) 
 1011   11  
 
 --------------

4) (inverteu 2) para 4) 
 
 1000 8 inv 7
 1001 9 inv 6
 1010 10 inv 5
 1100 12 inv 3
 
------------------------

para 4 bits, tem-se o 1 e 2 , e inverte-se par 3 e 4, usando o algoritimo...
 
 
 
 
 ignore 5 first bits, if they equal 0
 8bits)
 1)
    00000000   (base 00000000)
    00000001    1 
    00000010    2 
    00000100    4 
    00001000    8 
 

 faltam 9,10,11,12,13,14,15,17 
    
 
 2) 00010000 (base 00000000 1) ,relation to 1) continues in 2)
    00100000 32 
    01000000 64 
    10000000 128

 6)  inverted 1)
    ----------
    11111111 (base 11111111,inverse of 1) 255
    11111110  254
    11111101 253
    11111011 251
    11110111 247
    
7)   inverted 2)  (base 11111111)
    11101111 239  6) continues in 7)
    11011111 223
    10111111 191
    01111111 127

    
8)    
      00000011 3d (base 00000011)
      
      
      
9)  111111110 (revert base 00000011)  ===>  equal to 6)
    111111101
    
    
10) 00000101 5d (base 00000101)
    00000111 7d
    00000100 4d
    00000001 1d 
    
    
11) reverse 10) (base 11111010)
    11111110
      
      
      
 10)   inverse of 8) base(11111000), so i inverse the base (00000111) and go from there
    11111000
    11111001
    11111010
    11111100
    
    
      
11) inverse of 9
    01111000 , base (11111000) same of b) , 11) succeeds   to 10)
    10111000
    11011000
    11101000
    11110000
    

12) base = 11000111
   11100111
   11010111
   11001111
   11000011
   
13)   
   10000111
   01000111
   11000110
   11000101
   
   
   divide 8 bytes in two groups... The two groups of bytes, have all the bits equal to the base except one bit. The inverted groups from the originals , have a inverted base, and all bits are equal except one bit to the inverted base;
    
    
    inverting one group of bytes,(4 bytes) , inverts all the bits from those bytes (for example, 1100 to 0011, and inverts the base;
    
6)    
    (base 11111000)
    ------------
    11111001   249 rev 6
    11111010   250 rev 5
    11111100   252 rev 3
    
    
    
    
    ---------
    
   1) equals to another bytes, even if ones goes right or left)
                                                
    
 

    
 add 8d (the first bit), to the three bits (like for instance 000 => 1000, and 001 => 1001) to get the numbers
 or
 add 16 to the (binary numbers that have three bits, getting 5 bits).
 
 set the first bit to 0,1,10,11,100
 
  0 => 3 bits  (add 0)
  1 => 4 bits (add 8)
  10 => 5 bits (add 16)
  11 => 5 bits (add 24)  
  
  
  100 => 6 bits (add 32)
  101 => 6 bits (40)  
  110 => 6 bits (48) 
  111 => 6 bits (56) 
                    
  4 bits .... have(1 bit  | 3 bits) add bit
  5 bits .... have(2 bits | 3 bits) add bit
  6 bits ,,, have (3 bits | 3 bits) add bit
  7 bits ... have (4 bits | 3 bits) add bit
  8 bits ... have (4 bits | 4 bits) 
  
  7 bits ... have (1 bit | 3 bits | 3bits)
  8 bits ... have (1 bit | 3 bits | 1 bit | 3 bits)
                0 or 1   | base bits  | 0 or 1 | base bits
  
 0000
 0001
 0010  4 bits -> 2^4 -> 16
 0100
 0011
 0101 
 0110
 0111
 
 
    5 bits -> 2^5 bits
    
    
    3bits left  3 bits right =0
    3bits right 3 bits left = 0
    
    
    111 000
    000 111 
    
    111 111
    000 000
    

 
1 000 1 000
1 001 1 000
1 001 1 001
1 001 1 010 
 
shift left 4

1 010 0 000

try to ignore leading digit, so to become 3 bits and then use the algorithm
9,10

(it works with base 111 (inverting, ingoring leading zeros (until it reaches the bits which are assured);




 //  char *tempVar = (char *) malloc(500);
  //  tempVar = base;
    
    
    
    
   /* v[0][0] = base[0]; // 0
    v[0][1] = base[1]; // 2    
    v[0][2] = base[2]; // 4
    v[0][3] = base[3]  // 8
    
 
    var = [elems] | base[]
    
    var = ELeems | 000
    var = ELeems | 001
    var = ELeems | 002
    var = ELeems | 003
    
    var = 0 | 000 
    var = 0  | 001 
    var = 0 | 010
       v[it] = 0,1
    var = 1 | 00  // so precisa mudar 1 elemento da array
    */
    
    
     // 256 bits , em bytes são 32
	   // 32 bytes / 4 bytes (size of int) = 8
	    //64 bits * 4  = 256 ..
	    // Function for getting chars
	    // f(pos) = 8k+pos


	      //32 bytes need need 8 ints
	    // 8*32 = 256  (one byte, combinations)
	   // 8* 8192  = 65536 (two bytes,combinations)
	   // 8* 536870912  = 4294967296 (4bytes , combs)


	          // FROM https://stackoverflow.com/questions/34357968/how-to-set-first-three-bytes-of-integer-in-c
	          /*int a = 4294967233;
	                char* p=&a;

	                p[0] = whatever you wanted there
	                p[1] = whatever you wanted there




	      double res;  %f
	        int *currentByte = &res;
	


	            unsigned int array_base[8] = {0x00010203,0x04050607,0x08090A0B,0xC0D0E0F};
	            unsigned int mask_add_8 =    0x08080808;
	            printf("\n");
	            char *ptr = (char *) &array_base[0];


	            
	             Number of combinations


	            unsigned long // 8 bytes  +  18,446,744,073,709,551,615]


	            printf("\nNumber of combinations : %i\n", numberOfCombinations );
	            array_base[0] += mask_add_8;
	            array_base[1] += mask_add_8;
	            numberOfCombinations+=4;

    //char positions[] = { *ptr1 , *ptr2 , Ptr3 ,*ptr4

    
     /*    // Portanto os templates sao todosd os posisveis dum numero
            //o numero pnao pode estar contido noutro sitio (indicado pleos zeros)
            
            
            
               //n -> Número de elementos do conjunto.
    //p -> Quantidade de elementos por agrupamento
    //Arranjos = pow(n,p);
  //  n=8, p=4 = 4096
            
            [ 1,1,1,1 ]
            [ 1,1,1,0 ]  || equal to below
            [ 1,1,1,0 ] 
            [ 1,1,1,0 ]
            [ 1,1,1,0 ]
            [ 1,1,1,0 ]
            [ 1,1,1,0 ]
            [ 1,1,0,0 ]
            [ 1,1,0,0 ]
            [ 1,1,0,0 ]
          
          }  
          
          //     printf("\n { '%c','%c','%c' , '%c', '%c' ,'%c' , '%c','%c' }    it (%i)", \
                                    		pos1_ptr[i1],pos2_ptr[i2],pos3_ptr[i3],pos4_ptr[i4], \
                                    		pos5_ptr[i5],pos6_ptr[i6],pos7_ptr[i7],pos8_ptr[i8],\
                                    		total_iterations);
                                 
                               		
   							Pos 1			Pos2=pos1  		Pos3=pos1 Pos3=pos1
   Initial		x	1 2 3 4 5 6 7 8   1 2 3 4 5 6 7 8
   
   Permute		y	2 1 3 4 5 6 7 8   1 2 3 4 5 6 7 8
   
   				z	2 1 4 3 5 6 7 8  1 2 3 4 5 6 7 8
   
   
   					finished permutation position 2
   			a		1 2 3 4 5 6 7 8   1 2 3 4 5 6 7 8 x
   					1 2 3 4 5 6 7 8   2 1 3 4 5 6 7 8 y
   					1 2 3 4 5 6 7 8   2 1 4 3 5 6 7 8 z
   					
   					copiar permutation(x,y) -> pos2(x,y)
   					copiar pos2(x,y) -> pos3 (x,y)
   					
   					Pos1				Pos2			Pos3 , 
   					1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8   2 1 3 4 5 6 7 8 y		 	
   					1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8   2 1 4 3 5 6 7 8 z
   					
   					
   					
   					 
   						
   						Pos2 = pos1
   						permute one positions
   						xhg positions POs1=pos2, pos2=pos1
   						
   						procedure -> copy pos1 to all positions
   			 ->  permute position1 and save all of permutations in aray
   			 -> Pos2 = array
   			 -> pos2 = pos1											From position1
   			 -> pos3 = array (array that contains all permutations 1...8)
   			 -> pos3 = pos1
   			 
   			 ....
   			 -> Permute position2 and put it on array
   			 -> Pos 3 = array
   			 -> 
   			 
   			 Permutate 3 pos
   		(1,1,1)
   		(1,1,2)					(1,1,2) = (1,2,1) => line2 are permutations
   		(1,1,3)					
   		
   		Para cada permutacao , igualar pos3 index => 
   		
   			Permutate 2 pos
   		(1,1,1)
   		(1,2,1)
   		(1,3,1)
   		
   								Same element
   								(1,1,1)  (2,2,2) (3,3,3)			 
   		
   								one element on tuple
   		PErmutate 1 pos
   		(1,1,1)								Pos1			Pos2 		Pos3
   		(2,1,1)						line2 => (2,1,1) 	  (1,2,1)		(1,1,2)	
   		(3,1,1)
   											Pos1		Pos2		Pos3 
   									line3 => (3,1,1)	  (1,3,1)		(1,1,3)
   		
   								two 2's -> 
   									(2,2,1) (2,1,2) (1,2,2)
   									
   								two 3's ->
   									(3,3,1) (3,1,3) (1,3,3)
   									
   									
   		
   		
   		obter array da mudanca da posicao1 para depois igualar a outras
   		
   		copy array a = {1,2,3,4} 1) posicao 1 ,depois posicao 2 etc...
   		
   		
				
		(1,1,1)
		(2,1,1) change on pos1
		(3,1,1)
		
		(1,1,1) 
		(1,2,1) change on pos2
		(1,3,1)
		
		
		(1,1,1) Change on pos3
		(1,1,2)
		(1,1,3)
		
		(2,2,2) 
		(2,1,2)
		(2,3,2) position2
		
		
		(2,2,2) chagne on position3
		(2,2,1)
		(2,2,3)
		
		(3,3,3)
		(1,3,3)
		(2,3,3)
		
		(3,2,3)
		(3,1,3) change on pos2
		(3,3,3)
		
		(3,3,1) change on Pos3
		(3,3,2)
		(3,3,3)		
		
		 
		
		 uma permutacao em pos1 , permuta o mesmo em pos2
	
	
		 
   pos1(2,1,1) -> pso2(1,2,1) -> pos3 (1,1,2)
   pos1(2,2,1) -> pos2(2,1,2) -> pos3(1,2,2)
   pos1(2,2,2) -> pos2(2,1,2) -> pos3(2,2,1)
   
   
    
   pos1(3,1,1) -> pos2(1,3,1) -> pos3 (1,1,3) 
   
   
   Array[8!] = { (1,1,1,1),(1,1,2,1) ,(1,2,1,1),(2,1,1,1) ....}
   
   						 
   						
   