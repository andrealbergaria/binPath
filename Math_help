	
		/*
		 * 
		 * n -> num de elems 
		 * p.-> quantidade de elemetnos por
		 *  Arranjos => n! / (n-p)!grupo
		 *  n -> 2
		 *  
		 
		 	4C2
		 
		 */
		 
		 		// 256 bits / / 8bits =>  32bits
		 
		
		            	// Permutation = > factorial de elemeentos
				// n elementos => n! combinações permutate
				 // int combinations 4294967296
				 
				 // x |= 0b1; // set LSB bit
        
        // x |= 0b10; // set 2nd bit from LSB
        
      //o toggle a bit use:
      //x ^= (1 << y) | (1 << z); // toggle yth and zth bit
      
      // x |= (1 << y); // set the yth bit from the LSB
      
      /* For Permutation , 32 times 8 positions , and permute -> time 370528=> 
	 * 370,528 sec
	 *  6.175466667 minutes
	 * 

	 * 
	 * For Permutation1 , 32 times 8 positions, 
	 * Time elapsed 70902

 aes 128, 192 e 256 bits (chave)
   256 -> 32 bytes
   32/4 = 8 ints
      unsigned long // 8 bytes  +  18,446,744,073,709,551,615] 
     unsigned int 4294967296


associativety -> a + (b + c) = (a + b) + c, and a · (b · c) = (a · b) · c.
comutative = a+b = b+a
additive and multiplicative a + 0 = a and a · 1 = a.
additive inverses a + (−a) = 0.

multiplicative inverses a -1 = 1/a . a* a-1 = 1
----Arranjos
n -> num de elems 
p-> quantidade de elemetnos por grupo

4A2 => n=4 p=2 2^4 (arranjos com repetição )  n^p
{1,2,3} = arranjos simples (sem repetição) = 312, 321, 132, 123, 213, 231 = n! / (n-p)! n=3 p=3 
--------------

	 	
----------------------------------------------bit wise operations---

x |= 0b1; // set LSB bit
x |= 0b10; // set 2nd bit from LSB

--------------------------------------------to erase a bit use:

x &= ~0b1; // unset LSB bit (if set)
x &= ~0b10; // unset 2nd bit from LSB
--- -----------------------------------------to toggle a bit use:
x ^= 0b1;

-------------------------------------------To dynamically set at bit, use:

x |= (1 << y); // set the yth bit from the LSB

---------------------------------permutations
Permutation = > factorial de elemeentos

----- multiset, 
In multiset {a, a, a, b, b, b}, a and b both have multiplicity 3.
allows for writing the multiset {a, a, b} as ({a, b}, {(a, 2), (b, 1)})
like [1,1,1,2,3] [1,1,3,2,1]


associativety -> a + (b + c) = (a + b) + c, and a · (b · c) = (a · b) · c.
comutative = a+b = b+a
additive and multiplicative a + 0 = a and a · 1 = a.
additive inverses a + (−a) = 0.

multiplicative inverses a -1 = 1/a . a* a-1 = 1

MAtrices (A,B are) simetryct 

A = A' = [1 2] 	
		 [2	3]
B = B' = [5 6 7] 	
		 [6	3 2]
		 {7	2 1]
